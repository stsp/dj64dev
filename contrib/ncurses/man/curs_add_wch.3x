'\" t
.\"***************************************************************************
.\" Copyright 2019-2023,2024 Thomas E. Dickey                                *
.\" Copyright 2001-2015,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_add_wch.3x,v 1.71 2024/07/27 20:05:18 tom Exp $
.TH curs_add_wch 3X 2024-07-27 "ncurses @NCURSES_MAJOR@.@NCURSES_MINOR@" "Library calls"
.ie \n(.g \{\
.ds `` \(lq
.ds '' \(rq
.\}
.el \{\
.ie t .ds `` ``
.el   .ds `` ""
.ie t .ds '' ''
.el   .ds '' ""
.\}
.
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.SH NAME
\fB\%add_wch\fP,
\fB\%wadd_wch\fP,
\fB\%mvadd_wch\fP,
\fB\%mvwadd_wch\fP,
\fB\%echo_wchar\fP,
\fB\%wecho_wchar\fP \-
add a \fIcurses\fR complex character to a window, possibly advancing the cursor
.SH SYNOPSIS
.nf
\fB#include <curses.h>
.PP
\fBint add_wch(const cchar_t *\fIwch\fP);
\fBint wadd_wch(WINDOW *\fIwin\fP, const cchar_t *\fIwch\fP);
\fBint mvadd_wch(int \fIy\fP, int \fIx\fP, const cchar_t *\fIwch\fP);
\fBint mvwadd_wch(WINDOW *\fIwin\fP, int \fIy\fP, int \fIx\fP, const cchar_t *\fIwch\fP);
.PP
\fBint echo_wchar(const cchar_t *\fIwch\fP);
\fBint wecho_wchar(WINDOW *\fIwin\fP, const cchar_t *\fIwch\fP);
.fi
.SH DESCRIPTION
.SS wadd_wch
.B \%wadd_wch
writes the complex character
.I wch
to the window
.IR win ","
then may advance the cursor position,
analogously to the standard C library's \fI\%putwchar\fP(3).
\fB\%ncurses\fP(3X) describes the variants of this function.
.PP
Much behavior depends on whether the wide characters in
.I wch
are spacing or non-spacing;
see subsection \*(``Complex Characters\*('' below.
.bP
If
.I wch
contains a spacing character,
then any character at the cursor is first removed.
The complex character
.IR wch ","
with its attributes and color pair identifier,
becomes the
.I base
of the
.IR "active complex character" "."
.bP
If
.I wch
contains only non-spacing characters,
.\" XXX: see wadd_wch_literal (the beginning of the array may be nonspacing)
they are combined with the active complex character.
.I curses
ignores its attributes and color pair identifier,
and does not advance the cursor.
.PP
Further non-spacing characters added with
.B \%wadd_wch
are not written at the new cursor position but combine with the active
complex character until another spacing character is written to the
window or the cursor is moved.
.PP
If advancement occurs at the right margin,
.bP
the cursor automatically wraps to the beginning of the next line,
then,
.bP
if it was at the bottom of the scrolling region,
and if \fB\%scrollok\fP(3X) is enabled for
.IR win ,
the scrolling region scrolls up one line.
.PP
If
.I wch
is a
backspace,
carriage return,
line feed,
or
tab,
the cursor moves appropriately within the window.
.bP
Backspace moves the cursor one character left;
at the left margin of a window,
it does nothing.
.bP
Carriage return moves the cursor to the left margin on the same line of
the window.
.bP
Line feed does a \fB\%clrtoeol\fP(3X),
then advances as if from the right margin.
.bP
Tab advances the cursor to the next tab stop
(possibly on the next line);
these are placed at every eighth column by default.
Alter the tab interval with the
.B \%TABSIZE
extension;
see \fB\%curs_variables\fP(3X).
.PP
If
.I wch
is any other nonprintable character,
it is drawn in printable form using the same convention as
\fB\%wunctrl\fP(3X).
Calling \fB\%win_wch\fP(3X) on the location of a nonprintable character
does not return the character itself,
but its \fB\%wunctrl\fP(3X) representation.
.PP
A
.I \%cchar_t
can be copied from place to place using \fB\%win_wch\fP(3X) and
.BR \%wadd_wch "."
.SS wecho_wchar
.B \%echo_wchar
and
.B \%wecho_wchar
are equivalent to calling
.RB \%( w ) add_wch
followed by
.RB \%( w ) refresh .
.I curses
interprets these functions as a hint that only a single (complex)
character is being output;
for non-control characters,
a considerable performance gain may be enjoyed by employing them.
.\" TODO: Combine the following with the "Line Drawing" subsection of
.\" terminfo(5) and replace this with a cross reference there.
.SS "Forms-Drawing Characters"
.I curses
defines macros starting with
.B \%WACS_
that can be used with
.B \%wadd_wch
to write line-drawing and other special characters to the screen.
.I \%ncurses
terms these
.I "forms-drawing characters."
The ACS default listed below is used if the
.B \%acs_chars
.RB \%( acsc )
.I \%term\%info
capability does not define a terminal-specific replacement for it,
or if the terminal and locale configuration requires Unicode to access
these characters but the library is unable to use Unicode.
The \*(``acsc char\*('' column corresponds to how the characters are
specified in the
.B \%acs_chars
.RB \%( acsc )
string capability,
and the characters in it may appear on the screen if the terminal type's
database entry incorrectly advertises ACS support.
The name \*(``ACS\*('' originates in the Alternate Character Set feature
of the DEC VT100 terminal.
.PP
.ie t .ne 4v
.el   .ne 5v
.TS
Lb Lb Lb Lb Lb
Lb Lb Lb Lb Lb
Lb L  L  L  Lx.
\&	Unicode	ACS	acsc	\&
Symbol	Default	Default	char	Glyph Name
_
WACS_BLOCK	0x25ae	#	0	T{
solid square block
T}
WACS_BOARD	0x2592	#	h	board of squares
WACS_BTEE	0x2534	+	v	bottom tee
WACS_BULLET	0x00b7	o	~	bullet
WACS_CKBOARD	0x2592	:	a	T{
checker board (stipple)
T}
WACS_DARROW	0x2193	v	.	T{
arrow pointing down
T}
WACS_DEGREE	0x00b0	'	f	degree symbol
WACS_DIAMOND	0x25c6	+	\(ga	diamond
WACS_GEQUAL	0x2265	>	>	T{
greater-than-or-equal-to
T}
WACS_HLINE	0x2500	\-	q	horizontal line
WACS_LANTERN	0x2603	#	i	lantern symbol
WACS_LARROW	0x2190	<	,	T{
arrow pointing left
T}
WACS_LEQUAL	0x2264	<	y	T{
less-than-or-equal-to
T}
WACS_LLCORNER	0x2514	+	m	T{
lower left-hand corner
T}
WACS_LRCORNER	0x2518	+	j	T{
lower right-hand corner
T}
WACS_LTEE	0x2524	+	t	left tee
WACS_NEQUAL	0x2260	!	|	not-equal
WACS_PI	0x03c0	*	{	greek pi
WACS_PLMINUS	0x00b1	#	g	plus/minus
WACS_PLUS	0x253c	+	n	plus
WACS_RARROW	0x2192	>	+	T{
arrow pointing right
T}
WACS_RTEE	0x251c	+	u	right tee
WACS_S1	0x23ba	\-	o	scan line 1
WACS_S3	0x23bb	\-	p	scan line 3
WACS_S7	0x23bc	\-	r	scan line 7
WACS_S9	0x23bd	\&_	s	scan line 9
WACS_STERLING	0x00a3	f	}	T{
pound-sterling symbol
T}
WACS_TTEE	0x252c	+	w	top tee
WACS_UARROW	0x2191 	^	\-	T{
arrow pointing up
T}
WACS_ULCORNER	0x250c	+	l	T{
upper left-hand corner
T}
WACS_URCORNER	0x2510	+	k	T{
upper right-hand corner
T}
WACS_VLINE	0x2502	|	x	vertical line
.TE
.PP
The wide-character configuration of \fI\%ncurses\fP also defines symbols
for thick lines (\fBacsc\fP \*(``J\*('' to \*(``V\*(''):
.PP
.TS
Lb Lb Lb Lb Lb
Lb Lb Lb Lb Lb
Lb L  L  L  Lx.
\&	Unicode	ASCII	acsc	\&
ACS Name	Default	Default	Char	Glyph Name
_
WACS_T_BTEE	0x253b	+	V	T{
thick tee pointing up
T}
WACS_T_HLINE	0x2501	-	Q	T{
thick horizontal line
T}
WACS_T_LLCORNER	0x2517	+	M	T{
thick lower left corner
T}
WACS_T_LRCORNER	0x251b	+	J	T{
thick lower right corner
T}
WACS_T_LTEE	0x252b	+	T	T{
thick tee pointing right
T}
WACS_T_PLUS	0x254b	+	N	T{
thick large plus
T}
WACS_T_RTEE	0x2523	+	U	T{
thick tee pointing left
T}
WACS_T_TTEE	0x2533	+	W	T{
thick tee pointing down
T}
WACS_T_ULCORNER	0x250f	+	L	T{
thick upper left corner
T}
WACS_T_URCORNER	0x2513	+	K	T{
thick upper right corner
T}
WACS_T_VLINE	0x2503	|	X	T{
thick vertical line
T}
.TE
.PP
and for double-lines (\fBacsc\fP \*(``A\*('' to \*(``I\*(''):
.PP
.TS
Lb Lb Lb Lb Lb
Lb Lb Lb Lb Lb
Lb L  L  L  Lx.
\&	Unicode	ASCII	acsc	\&
ACS Name	Default	Default	Char	Glyph Name
_
WACS_D_BTEE	0x2569	+	H	T{
double tee pointing up
T}
WACS_D_HLINE	0x2550	-	R	T{
double horizontal line
T}
WACS_D_LLCORNER	0x255a	+	D	T{
double lower left corner
T}
WACS_D_LRCORNER	0x255d	+	A	T{
double lower right corner
T}
WACS_D_LTEE	0x2560	+	F	T{
double tee pointing right
T}
WACS_D_PLUS	0x256c	+	E	T{
double large plus
T}
WACS_D_RTEE	0x2563	+	G	T{
double tee pointing left
T}
WACS_D_TTEE	0x2566	+	I	T{
double tee pointing down
T}
WACS_D_ULCORNER	0x2554	+	C	T{
double upper left corner
T}
WACS_D_URCORNER	0x2557	+	B	T{
double upper right corner
T}
WACS_D_VLINE	0x2551	|	Y	T{
double vertical line
T}
.TE
.PP
Unicode's descriptions for these characters differs slightly from
\fI\%ncurses\fP,
by introducing the term \*(``light\*('' (along with less important details).
Here are its descriptions for the normal, thick, and double horizontal lines:
.bP
U+2500 BOX DRAWINGS LIGHT HORIZONTAL
.bP
U+2501 BOX DRAWINGS HEAVY HORIZONTAL
.bP
U+2550 BOX DRAWINGS DOUBLE HORIZONTAL
.SH RETURN VALUE
These functions return
.B OK
on success and
.B ERR
on failure.
In
.IR \%ncurses ,
.B \%wadd_wch
returns
.B ERR
if
.bP
.I win
is
.BR NULL ","
.bP
wrapping to a new line is impossible because \fB\%scrollok\fP(3X) has
not been called on
.I win
when writing to its bottom right location is attempted,
or
.bP
it is not possible to add a complete character at the cursor position.
.PP
Functions prefixed with \*(``mv\*('' first perform cursor movement and
fail if the position
.RI ( y ,
.IR x )
is outside the window boundaries.
.SH NOTES
.BR add_wch ","
.BR mvadd_wch ","
.BR mvwadd_wch ","
and
.B echo_wchar
may be implemented as macros.
.SH EXTENSIONS
.SS TABSIZE
The
.B TABSIZE
variable is implemented in SVr4 and other versions of
.IR curses ,
but is not specified by X/Open Curses
(see \fBcurs_variables\fP(3X)).
.SH PORTABILITY
These functions are described in X/Open Curses, Issue 4.
It specifies no error conditions for them.
.PP
The defaults specified for forms-drawing characters apply in the POSIX
locale.
X/Open Curses makes it clear that the WACS_ symbols should be defined as
a pointer to \fBcchar_t\fP data, e.g., in the discussion of \fBborder_set\fP.
A few implementations are problematic:
.bP
NetBSD curses defines the symbols as a \fBwchar_t\fP within a \fBcchar_t\fP.
.bP
HP-UX curses equates some of the \fBACS_\fP symbols
to the analogous \fBWACS_\fP symbols as if the \fBACS_\fP symbols were
wide characters.
The misdefined symbols are the arrows
and other symbols which are not used for line-drawing.
.PP
X/Open Curses does not specify symbols for thick- or double-lines.
SVr4 curses implementations defined their line-drawing symbols in
terms of intermediate symbols.
This implementation extends those symbols, providing new definitions
which are not in the SVr4 implementations.
.PP
Not all Unicode-capable terminals provide support for VT100-style
alternate character sets (i.e., the \fBacsc\fP capability),
with their corresponding line-drawing characters.
X/Open Curses did not address the aspect of integrating Unicode with
line-drawing characters.
Existing implementations of Unix curses (AIX, HP-UX, Solaris)
use only the \fBacsc\fP character-mapping to provide this feature.
As a result, those implementations can only use single-byte line-drawing
characters.
\fI\%ncurses\fP 5.3 (2002) provided a table of Unicode values to solve
these problems.
NetBSD curses incorporated that table in 2010.
.PP
In this implementation, the Unicode values are used instead of the
terminal description's \fBacsc\fP mapping as discussed in
\fB\%ncurses\fP(3X) for the environment variable
\fINCURSES_NO_UTF8_ACS\fP.
In contrast, for the same cases, the line-drawing characters
described in \fB\%addch\fP(3X) will use only the ASCII default values.
.PP
Having Unicode available does not solve all of the problems with
line-drawing for curses:
.bP
The closest Unicode equivalents to the
VT100 graphics \fIS1\fP, \fIS3\fP, \fIS7\fP and \fIS9\fP
frequently are not displayed at
the regular intervals which the terminal used.
.bP
The \fIlantern\fP is a special case.
It originated with the AT&T 4410 terminal in the early 1980s.
There is no accessible documentation depicting the lantern symbol
on the AT&T terminal.
.IP
Lacking documentation, most readers assume that a \fIstorm lantern\fP
was intended.
But there are several possibilities, all with problems.
.IP
Unicode 6.0 (2010) does provide two lantern symbols: U+1F383 and U+1F3EE.
Those were not available in 2002, and are irrelevant since
they lie outside the BMP and as a result are not generally available
in terminals.
They are not storm lanterns, in any case.
.IP
Most \fIstorm lanterns\fP have a tapering glass chimney
(to guard against tipping);
some have a wire grid protecting the chimney.
.IP
For the tapering appearance, \[u2603] U+2603 was adequate.
In use on a terminal, no one can tell what the image represents.
Unicode calls it a snowman.
.IP
Others have suggested these alternatives:
\[sc] U+00A7 (section mark),
\[u0398] U+0398 (theta),
\[u03A6] U+03A6 (phi),
\[u03B4] U+03B4 (delta),
\[u2327] U+2327 (x in a rectangle),
\[u256C] U+256C (forms double vertical and horizontal), and
\[u2612] U+2612 (ballot box with x).
.SS "Complex Characters"
The complex character type
.I \%cchar_t
can store more than one wide character
.RI \%( wchar_t ).
X/Open Curses does not mention this possibility,
specifying behavior only where
.I wch
is a single character,
either spacing or non-spacing.
.PP
.I \%ncurses
assumes that
.I wch
is constructed using \fB\%setcchar\fP(3X),
and in turn that the result
.bP
contains at most one spacing character at the beginning of its list of
wide characters,
and zero or more non-spacing characters,
or
.bP
holds one non-spacing character.
.PP
In the latter case,
.I \%ncurses
adds the non-spacing character to the active complex character.
.SH HISTORY
These functions were initially specified by X/Open Curses,
Issue 4.
The System\ V Interface Definition,
Version 4 (1995),
specified functions named
.I \%waddwch
and
.I \%wechowchar
(and the usual variants).
.\" SVID 4, vol 3., p. 475
These were later additions to
.RI SVr4. x ,
not appearing in the first SVr4 (1989).
They differed from X/Open's later
.I \%wadd_wch
and
.I \%wecho_wchar
in that they each took an argument of type
.I \%wchar_t
instead of
.IR \%cchar_t "."
.SH SEE ALSO
\fB\%curs_addch\fP(3X) describes comparable functions of the
.I \%ncurses
library in its non-wide-character configuration.
.PP
\fB\%curses\fP(3X),
\fB\%curs_addwstr\fP(3X),
\fB\%curs_add_wchstr\fP(3X),
\fB\%curs_attr\fP(3X),
\fB\%curs_clear\fP(3X),
\fB\%curs_getcchar\fP(3X),
\fB\%curs_outopts\fP(3X),
\fB\%curs_refresh\fP(3X),
\fB\%curs_variables\fP(3X),
\fB\%putwc\fP(3)
